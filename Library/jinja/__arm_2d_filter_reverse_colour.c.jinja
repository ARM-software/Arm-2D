/*
 * Copyright (c) 2009-2024 Arm Limited. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /* ----------------------------------------------------------------------
 * Project:      Arm-2D Library
 * Title:        __arm_2d_filter_reverse_colour.c
 * Description:  the source code of the colour-reversing
 *
 * $Date:        29. Nov 2024
 * $Revision:    V.1.0.0
 *
 * Target Processor:  Cortex-M cores
 *
 * -------------------------------------------------------------------- */

/*============================ INCLUDES ======================================*/

#ifdef __ARM_2D_COMPILATION_UNIT
#undef __ARM_2D_COMPILATION_UNIT

#define __ARM_2D_IMPL__

#include "arm_2d.h"
#include "__arm_2d_impl.h"

#ifdef   __cplusplus
extern "C" {
#endif

#if defined(__clang__)
#   pragma clang diagnostic ignored "-Wunknown-warning-option"
#   pragma clang diagnostic ignored "-Wreserved-identifier"
#   pragma clang diagnostic ignored "-Wincompatible-pointer-types-discards-qualifiers"
#   pragma clang diagnostic ignored "-Wmissing-variable-declarations"
#   pragma clang diagnostic ignored "-Wcast-qual"
#   pragma clang diagnostic ignored "-Wcast-align"
#   pragma clang diagnostic ignored "-Wextra-semi-stmt"
#   pragma clang diagnostic ignored "-Wsign-conversion"
#   pragma clang diagnostic ignored "-Wunused-function"
#   pragma clang diagnostic ignored "-Wimplicit-int-float-conversion"
#   pragma clang diagnostic ignored "-Wdouble-promotion"
#   pragma clang diagnostic ignored "-Wunused-parameter"
#   pragma clang diagnostic ignored "-Wimplicit-float-conversion"
#   pragma clang diagnostic ignored "-Wimplicit-int-conversion"
#   pragma clang diagnostic ignored "-Wtautological-pointer-compare"
#   pragma clang diagnostic ignored "-Wsign-compare"
#   pragma clang diagnostic ignored "-Wmissing-prototypes"
#   pragma clang diagnostic ignored "-Wgnu-zero-variadic-macro-arguments"
#   pragma clang diagnostic ignored "-Wswitch-enum"
#   pragma clang diagnostic ignored "-Wswitch"
#   pragma clang diagnostic ignored "-Wdeclaration-after-statement"
#elif defined(__IS_COMPILER_ARM_COMPILER_5__)
#   pragma diag_suppress 174,177,188,68,513,144
#endif

/*============================ MACROS ========================================*/
#undef OP_CORE
#define OP_CORE this.use_as__arm_2d_op_core_t
#undef OPCODE
#define OPCODE this

/*============================ MACROFIED FUNCTIONS ===========================*/
/*============================ TYPES =========================================*/
/*============================ GLOBAL VARIABLES ==============================*/
/*============================ PROTOTYPES ====================================*/
/*============================ LOCAL VARIABLES ===============================*/
/*============================ IMPLEMENTATION ================================*/


{%- for colour_name, colour_int, colour_int_prefix, colour_int_no_bits in [
    ('gray8', 'uint8_t', 'ch', '8' ),
    ('rgb565', 'uint16_t', 'hw', '16' ),
    ('cccn888', 'uint32_t', 'w', '32' ),
    ] 
%}

/*
 * the Frontend API
 */

ARM_NONNULL(2)
arm_fsm_rt_t arm_2dp_{{colour_name}}_filter_reverse_colour(  
                                                arm_2d_op_fill_cl_msk_t *ptOP,
                                                const arm_2d_tile_t *ptTarget,
                                                const arm_2d_region_t *ptRegion)
{
    assert(NULL != ptTarget);

    ARM_2D_IMPL(arm_2d_op_t, ptOP);

    if (!__arm_2d_op_acquire((arm_2d_op_core_t *)ptThis)) {
        return arm_fsm_rt_on_going;
    }

    OP_CORE.ptOp = &ARM_2D_OP_FILTER_REVERSE_COLOUR_{{colour_name|upper}};

    this.Target.ptTile = ptTarget;
    this.Target.ptRegion = ptRegion;

    return __arm_2d_op_invoke((arm_2d_op_core_t *)ptThis);
}


/* default low level implementation */

__WEAK
void __arm_2d_impl_{{colour_name}}_reverse_colour(   {{colour_int}} *__RESTRICT p{{colour_int_prefix}}Target,
                                            int16_t iTargetStride,
                                            arm_2d_size_t *__RESTRICT ptCopySize)
{
    for (int_fast16_t y = 0; y < ptCopySize->iHeight; y++) {

        {{colour_int}} *__RESTRICT p{{colour_int_prefix}}TargetLine = p{{colour_int_prefix}}Target;
        for (int_fast16_t x = 0; x < ptCopySize->iWidth; x++){
        {%- if colour_name == "cccn888"  %}
            *pwTargetLine++ ^= 0x00FFFFFF;
        {%- else %}
            *p{{colour_int_prefix}}TargetLine++ ^= __UINT{{colour_int_no_bits}}_MAX__;
        {%- endif %}
        }
        p{{colour_int_prefix}}Target += iTargetStride;
    }
}

/*
 * The backend entry
 */
arm_fsm_rt_t __arm_2d_{{colour_name}}_sw_filter_reverse_colour( __arm_2d_sub_task_t *ptTask)
{
    ARM_2D_IMPL(arm_2d_op_t, ptTask->ptOP);
    assert(ARM_2D_COLOUR_SZ_{{colour_int_no_bits}}BIT == OP_CORE.ptOp->Info.Colour.u3ColourSZ);

    __arm_2d_impl_{{colour_name}}_reverse_colour(
                    ptTask->Param.tTileProcess.pBuffer,
                    ptTask->Param.tTileProcess.iStride,
                    &(ptTask->Param.tTileProcess.tValidRegion.tSize));

    return arm_fsm_rt_cpl;
}

/*
 * OPCODE Low Level Implementation Entries
 */
__WEAK
def_low_lv_io(  __ARM_2D_IO_FILTER_REVERSE_COLOUR_{{colour_name|upper}},
                __arm_2d_{{colour_name}}_sw_filter_reverse_colour); /* Default SW Implementation */


/*
 * OPCODE
 */

const __arm_2d_op_info_t ARM_2D_OP_FILTER_REVERSE_COLOUR_{{colour_name|upper}} = {
    .Info = {
        .Colour = {
            .chScheme   = ARM_2D_COLOUR_{{colour_name|upper}},
        },
        .Param = {
            .bHasSource     = false,
            .bHasTarget     = true,
        },
        .chOpIndex      = __ARM_2D_OP_IDX_FILTER_REVERSE_COLOUR,
        
        .LowLevelIO = {
            .ptTileProcessLike = ref_low_lv_io(__ARM_2D_IO_FILTER_REVERSE_COLOUR_{{colour_name|upper}}),
        },
    },
};

{%- endfor %}

#ifdef   __cplusplus
}
#endif

#endif

