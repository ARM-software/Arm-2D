/*
 * Copyright (C) 2024 Arm Limited or its affiliates. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* ----------------------------------------------------------------------
 * Project:      Arm-2D Library
 * Title:        __arm_2d_fill_colour_with_horizontal_line_mask.h
 * Description:  APIs for colour-filling-with-horizontal-line-mask
 *
 * $Date:        20. April 2024
 * $Revision:    V.0.3.0
 *
 * Target Processor:  Cortex-M cores
 *
 * -------------------------------------------------------------------- */

#ifndef __ARM_2D_FILL_COLOUR_WITH_HORIZONTAL_LINE_MASK_H__
#define __ARM_2D_FILL_COLOUR_WITH_HORIZONTAL_LINE_MASK_H__

/*============================ INCLUDES ======================================*/
#include "arm_2d_types.h"

#ifdef   __cplusplus
extern "C" {
#endif

#if defined(__clang__)
#   pragma clang diagnostic push
#   pragma clang diagnostic ignored "-Wunknown-warning-option"
#   pragma clang diagnostic ignored "-Wreserved-identifier"
#   pragma clang diagnostic ignored "-Wdeclaration-after-statement"
#   pragma clang diagnostic ignored "-Wsign-conversion"
#   pragma clang diagnostic ignored "-Wpadded"
#   pragma clang diagnostic ignored "-Wgnu-zero-variadic-macro-arguments"
#   pragma clang diagnostic ignored "-Wmissing-declarations"
#endif


/*============================ MACROS ========================================*/
/*============================ MACROFIED FUNCTIONS ===========================*/

{%- for colour_name, colour_int, colour_int_prefix, colour_int_no_bits in [
    ('gray8', 'uint8_t', 'ch', '8BIT' ),
    ('rgb565', 'uint16_t', 'hw', '16BIT' ),
    ('cccn888', 'uint32_t', 'w', '32BIT' ),
    ] 
%}

#define arm_2d_{{colour_name | lower}}_fill_colour_with_horizontal_line_mask(                   \
                                    __TARGET_ADDR,  /*   target tile address*/  \
                                    __REGION_ADDR,  /*   target region address*/\
                                    __MASK_ADDR,    /*   mask tile address */   \
                                    __COLOUR)       /*   colour */              \
            arm_2dp_{{colour_name | lower}}_fill_colour_with_horizontal_line_mask(              \
                                  NULL,                                         \
                                 (__TARGET_ADDR),                               \
                                 (__REGION_ADDR),                               \
                                 (__MASK_ADDR),                                 \
                                 (arm_2d_color_{{colour_name | lower}}_t){(__COLOUR).tValue})

{%- endfor %}

/*============================ TYPES =========================================*/

/*!
 * \brief control block for colour-filling-with-mask operations
 * \note arm_2d_op_fill_cl_l_msk_t inherits from arm_2d_op_msk_t explicitly 
 */
typedef struct arm_2d_op_fill_cl_l_msk_t {
    inherit(arm_2d_op_core_t);
    struct {
        const arm_2d_tile_t     *ptTile;                //!< target tile
        const arm_2d_region_t   *ptRegion;              //!< target region
    } Target;

    /* derived part */
    struct {
        const arm_2d_tile_t     *ptTargetSide;          //!< target mask tile
    } Mask;

    union {
        uint8_t  chColour;                      //!< 8bit key colour
        uint16_t hwColour;                      //!< 16bit key colour
        uint32_t wColour;                       //!< 32bit key colour
    };
} arm_2d_op_fill_cl_l_msk_t;

/*============================ GLOBAL VARIABLES ==============================*/
/*============================ PROTOTYPES ====================================*/
/*============================ LOCAL VARIABLES ===============================*/
/*============================ IMPLEMENTATION ================================*/

{%- for colour_name, colour_int, colour_int_prefix, colour_int_no_bits in [
    ('gray8', 'uint8_t', 'ch', '8BIT' ),
    ('rgb565', 'uint16_t', 'hw', '16BIT' ),
    ('cccn888', 'uint32_t', 'w', '32BIT' ),
    ] 
%}

extern
ARM_NONNULL(2,4)
arm_fsm_rt_t arm_2dp_{{colour_name | lower}}_fill_colour_with_horizontal_line_mask(
                                        arm_2d_op_fill_cl_l_msk_t *ptOP,
                                        const arm_2d_tile_t *ptTarget,
                                        const arm_2d_region_t *ptRegion,
                                        const arm_2d_tile_t *ptLineMask,
                                        arm_2d_color_{{colour_name | lower}}_t tColour);

{%- endfor %}


#if defined(__clang__)
#   pragma clang diagnostic pop
#endif

#ifdef   __cplusplus
}
#endif


#endif /* __ARM_2D_FILL_COLOUR_WITH_HORIZONTAL_LINE_MASK_H__ */
